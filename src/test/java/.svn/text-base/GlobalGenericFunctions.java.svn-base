package com.root;

/*import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Properties;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;*/

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import java.util.List;
import java.util.Locale;

import java.util.Properties;
import java.util.Random;
import java.util.concurrent.TimeUnit;


import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.read.biff.BiffException;
import jxl.Cell;
import jxl.format.Colour;
import jxl.write.*;
import jxl.write.biff.RowsExceededException;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;




public class GlobalGenericFunctions {
	
	public static String strBrowser="";
	public static String strUrl="";
	public WebDriver driver;
	Properties prop;
	public int intTimeOut = 10000;
	public FileInputStream fs;
	
	
	// for Data input file
	private String strDataInputPath;
	//private boolean defaultWebDriver = true;
	
	// for reporting function
    private boolean new_file;
    private boolean new_file1;
    private int row=0;
    private static WritableCellFormat timesBoldUnderline, times,pass,fail,function;
    public static final String DATE_FORMAT_NOW = "dd/MM/yyyy   HH:mm:ss";
    public static final String DATE_FORMAT_NOW1 = "dd/MM/yyyy"  ;
    public static String dt;

    public boolean bDataMigration=false;
	
	
    
	public GlobalGenericFunctions() throws FileNotFoundException, IOException{
		prop=TB_GG_LoadPropertiesfiles();
	}
/**********************************************************************************************************
	'  Function Name:	TB_GG_LoadPropertiesfiles 
	'  Purpose		: 		This function will load the properties file 
	'  Parameters	:
	'  Returns		: 		Property value
	'  Author       : 	Ruchi
	'  Creation Date: 	02/08/2012
/**********************************************************************************************************/

	
	public Properties TB_GG_LoadPropertiesfiles() throws FileNotFoundException, IOException{
		String strDM="";
		try{	
			prop = new Properties();
			prop.load(new FileInputStream("TB_Xpath.properties"));
			prop.load(new FileInputStream("TB_Configuration.properties"));
			prop.load(new FileInputStream("TB_Err_Xpath.properties"));
			
			
			strDM = prop.getProperty("Environment");
			if(strDM.equalsIgnoreCase("DataMigration"))
				bDataMigration = true;
			return prop;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			TB_GG_Log("Got an exception: Could not load Properties"+ e.getMessage().toString());

		}
		TB_GG_Log("Could not load Properties file!");
		return null;
		
	}
	
	/**********************************************************************************************************
	'  Function Name:	TB_GG_SetInputFile
	'  Purpose: 		 SetInputFile function is for setting input data files for current operations
	'  Inputs Parameters:  file-name.xls
	'  Returns: 	complete path to file
	'  Author       : Surinder
	'  Creation Date: 14/08/2012
/
 **********************************************************************************************************/		
	public String TB_GG_SetInputFile(String dataFile) 
	{
		String strPath = "";
		
		try
		{
			
			if(bDataMigration)
				strPath = prop.getProperty("strTestDataPath_DM");	
			else
			strPath = prop.getProperty("strTestDataPath");	
			//initialising class variable for data input file
			String strDataInput = strPath.trim() +"/"+ dataFile.trim();
			this.TB_GG_SetDataInputPath(strDataInput);
			//this.backupDataFile = strPath + "backup" + dataFile;
			return strDataInput;
		}
		catch (Exception ex)
		{
			System.err.println("Got an exception setting Data input file! ");
            ex.printStackTrace();
            TB_GG_Log("Got an exception setting Data input file! "+ ex.getMessage().toString());
		}
	
		TB_GG_Log("Could not set input data file for:" + strPath);
		return null;
	}
	
	/**********************************************************************************************************
	 * @category : Helper
	 * @param path
	 * @author Surinder 
	 ***********************************************************************************************************/
	
	public void TB_GG_SetDataInputPath(String path)
	{
		this.strDataInputPath=path;
	}
	
	/**********************************************************************************************************
	 * @category : Helper
	 * @author Surinder 
	 ***********************************************************************************************************/
	
	
	public String TB_GG_GetDataInputPath()
	{
		return this.strDataInputPath;
	}

	
	
	
	/**********************************************************************************************************
	'  Function Name:	TB_GG_GetExecutionRow
	'	@ Purpose: 		 GetExecutionRow function is for setting input data row for current file
	'  	@ return row number
	' 	@author Surinder
	'  Creation Date: 14/08/2012
/
 **********************************************************************************************************/			
	
	
	public int TB_GG_GetExecutionRow()
	{
		String strFile = this.TB_GG_GetDataInputPath();

		try
		{
			String row = this.TB_GG_ReadXL(1, "Execution_Rowid", this.TB_GG_GetDataInputPath()); 
			//String row = this.TB_GG_ReadXL(1, "Execution_Rowid", prop.getProperty("strTestSuitFile")); 
			return Integer.parseInt(row);
		}
		catch (NumberFormatException e)
		{
			TB_GG_Log("Got an exception getting the execution row for given File: "+ strFile +" Please pass TC_Id in marked cell of the row you want to execute the test for! "+e.getMessage().toString());
		}
		catch (Exception ex)
		{
			System.err.println("Got an exception getting the execution row for given File: "+ strFile);
            ex.printStackTrace();
            TB_GG_Log("Got an exception getting the execution row for given File: "+ strFile+ex.getMessage().toString());
		}
		
		TB_GG_Log("Could not set Execution Row for:" + strFile);
		return (Integer) null;
	}
	
	
/**********************************************************************************************************
	'  Function Name:	GGF_LaunchApplication 
	'  Purpose: 		This function will launch the application with the given browser in configuration.properties
	'  Inputs Parameters:
	'  Returns: 
	'  Author       : Ruchi
	'  Creation Date: 02/08/2012
/
  **********************************************************************************************************/

	
	public WebDriver TB_GG_LaunchApplication()  {
	
		
		
		strBrowser = prop.getProperty("strBrowser");
		
		
		
		if(bDataMigration)
		strUrl=prop.getProperty("strUrl_DM");
		else
		strUrl=prop.getProperty("strUrl");
	
		
		if (strBrowser != null && strBrowser.equalsIgnoreCase("firefox")) 
		{	
			
			FirefoxProfile fp = new FirefoxProfile();
			fp.setEnableNativeEvents(false);
			driver = new FirefoxDriver(fp);
			driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			
		}
		else if (strBrowser != null && strBrowser.equalsIgnoreCase("iexplore")) 
		{
			DesiredCapabilities ieCapabilities = DesiredCapabilities.internetExplorer();
			
			ieCapabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
			driver= new InternetExplorerDriver(ieCapabilities);
			//driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);

		}

			
		else if (strBrowser != null && strBrowser.equalsIgnoreCase("chrome")) 
		{
			System.setProperty("webdriver.chrome.driver", "lib\\chromedriver.exe");
			driver = new ChromeDriver();
		}
		driver.get(strUrl);
		driver.manage().window().maximize();		
		return driver;

	}
	/**********************************************************************************************************
	'  Function Name:	waitAnElementPresent 
	'  Purpose: 		This function will wait an object present until timeup. 
	'  Inputs Parameters:	WebDriver webDriver, By by
				webDriver:	WebDriver to run the test
				by:	By.xpath(oObjectXpath)
	'  Returns: 	
	'  Author       : Thuan Nguyen
	'  Creation Date: 04/05/2012
	/**********************************************************************************************************/
	
/*	public void TB_GG_WaitAnElementPresent(WebDriver webDriver, By by, int iTimeOut)
	{
		int iTotal = 0;
		int iSleepTime = 5000;
		while(iTotal < iTimeOut)
		{
			List<WebElement> oWebElements = webDriver.findElements(by);
			if(oWebElements.size()>0)
				return;
			else
			{
				try
				{
					Thread.sleep(iSleepTime);
					iTotal = iTotal + iSleepTime;
					//System.out.println(String.format("Waited for %d milliseconds.[%s]", iTotal, by));          
				}
				catch(InterruptedException ex) 
				{
					throw new RuntimeException(ex);
				}
			}
		}
	}*/
	



	/**********************************************************************************************************
	 ' @ update 
	  	TB_GG_WaitAndgetValuesOfDropdownlist 
	 ' Purpose:   This function will get and return list values of dropdown list and wait if the value is not loaded. 
	 @ updated skaur
	 	 /**********************************************************************************************************/
	public String[] TB_GG_WaitAndGetValuesOfDropdownlist(WebElement webElement)
	{
		String []arrValue = null;
		String []arrAcutalValue = null;
		try
		{   
			
			
			int iSleepTime = 5000;
			for(int i = 0; i < 50000; i += iSleepTime)
			{
				List <WebElement> lstOptions = webElement.findElements(By.tagName("option"));
				int intCount = lstOptions.size();
				if(lstOptions.size()>0)
				{
					int k = 0;
					arrValue = new String[intCount];	
					for (WebElement weOption : lstOptions)
					{
						String strListValue = weOption.getText();
						arrValue[k] = strListValue;
						k++;
					}
					if (arrValue[0].contains("Select"))
					{
						arrAcutalValue = new String[arrValue.length - 1];
						for(int j = 0; j < arrAcutalValue.length; j++)
						{
							arrAcutalValue[j] = arrValue[j+1];     
						}
					}
					else
					{
						arrAcutalValue = arrValue;
					}  
				}
				else
				{
						Thread.sleep(iSleepTime);
						System.out.println("DROP DOWN LIST NOT UPDATED! ");
						System.out.println(String.format("Waited for %d milliseconds.[%s]", i + iSleepTime, webElement.getText()));          
					
				}
			}
		}
		catch(Exception ex)
		{   
			System.err.println("Got an exception! ");
			ex.printStackTrace(); 
			TB_GG_Log(ex.getMessage().toString());
		}  
		return arrAcutalValue;
	}
	
	/**********************************************************************************************************
	 '  Function Name: getValuesOfDropdownlist 
	 '  Purpose:   This function will get and return list values of dropdown list. 
	 '  Inputs Parameters: WebElement webElement
	    	webElement: Dropdown list object we want to get values.    
	 '  Returns:  []arrValue - array value of dropdown lsit.
	 '  Author       : Thuan Nguyen
	 '  Creation Date: 05/07/2012
	 /**********************************************************************************************************/
	public String[] TB_GG_GetValuesOfDropdownlist(WebElement webElement)
	{
		String []arrValue = null;
		String []arrAcutalValue = null;
		try
		{   
			List <WebElement> lstOptions = webElement.findElements(By.tagName("option"));
			int intCount = lstOptions.size();
			arrValue = new String[intCount];
			int i = 0;
			for (WebElement weOption : lstOptions)
			{
				String strListValue = weOption.getText();
				arrValue[i] = strListValue;
				i++;
			}   
			if (arrValue[0].contains("Select"))
			{
				arrAcutalValue = new String[arrValue.length - 1];
				for(int j = 0; j < arrAcutalValue.length; j++)
				{
					arrAcutalValue[j] = arrValue[j+1];     
				}
			}
			else
			{
				arrAcutalValue = arrValue;
			}  
		}
		catch(Exception ex)
		{   
			System.err.println("Got an exception! ");
			ex.printStackTrace(); 
			TB_GG_Log(ex.getMessage().toString());
		}  
		return arrAcutalValue;
	}
	
	/********************************************************************************************************** 
	   Function used to get the selected option of drop down list.
	  @category	TB_GG_getSelectedOption 
	 @return String
	 @author Skaur
	 	 /**********************************************************************************************************/		
	public String TB_GG_getSelectedOption(WebElement webElement)
	{
		//String []arrValue = null;
		String strSelectedValue = null;
		try
		{   
			List <WebElement> Ooptions = webElement.findElements(By.tagName("option"));
			//int intCount = Ooptions.size();
			//arrValue = new String[intCount];
			
			for (WebElement weOption : Ooptions)
			{
				
				if(weOption.isSelected())
				{
					strSelectedValue =weOption.getText();
					return strSelectedValue;
				}	
			}   
			
		}
		catch(Exception ex)
		{   
			System.err.println("Got an exception! ");
			ex.printStackTrace(); 
			TB_GG_Log(ex.getMessage().toString());
		}  
		return strSelectedValue;
	}
	
	
	/*********************************************************************************************************************************
	FUNCTIONS FOR INPUT OUTPUT OPERATIONS
***********************************************************************************************************************************/	
	/**********************************************************************************************************
	'  Function Name:	TB_GG_readXL
	'  Purpose: 		read function for reading value from given row number and a column value to match
	'  Inputs Parameters:  1 -Row Number , "username" - Column Name
	'  Returns: 	value for given row and calculated column
	'  Author       : Skaur
	'  Creation Date: 07/08/2012
/
 **********************************************************************************************************/

	
	public String TB_GG_ReadXL(int row, String column,String strFilePath) 
	{
		Cell c= null;
		int reqCol=0;
		WorkbookSettings ws = null;
		Workbook workbook = null;
		Sheet sheet = null;
		
		//value used to return value
		
		
		try{
			fs = new FileInputStream(new File(strFilePath));
			ws = new WorkbookSettings();
			ws.setLocale(new Locale("en", "EN"));
			
			// opening the work book and sheet for reading y's
			workbook = Workbook.getWorkbook(fs, ws);
			sheet = workbook.getSheet(0);
		    
			// Sanitise given data
			String col = column.trim();
			//loop for going through the given row
			for(int j=0; j<sheet.getColumns(); j++)
			{
				Cell cell = sheet.getCell(j,0);
				if((cell.getContents().trim()).equalsIgnoreCase(col))
				{	
					//System.out.println(cell.getContents());
					reqCol= cell.getColumn();
					//System.out.println("column No:"+reqCol);
					c = sheet.getCell(reqCol, row);
					fs.close();
				//	System.out.println(c.getContents());
					return c.getContents();
				}
				
			}

		
		}
		catch(BiffException be)
		{
			
			TB_GG_Log(be.getMessage().toString());
			TB_GG_Log("The given file should have .xls extension.");
			System.out.println("The given file should have .xls extension.");
		}
		catch(Exception e)
		{
			e.printStackTrace();
			TB_GG_Log(e.getMessage().toString());
		}
		TB_GG_Log("NO MATCH FOUND IN GIVEN FILE: PROBLEM IS COMING FROM DATA FILE");
		return null;
	}

	/**********************************************************************************************************
	'  Function Name:	TB_GG_VerifyExecution
	'  Purpose: 		Called to verify the execution status Y/N from ./DataPool/TestSuites.xls
	'  Inputs Parameters: Login - pass the name of method/test given in execution control file: TestSuites 
	'  Returns: 	true if gets Y
	' @author Skaur
	'  Creation Date: 07/08/2012
/
 **********************************************************************************************************/
	public boolean TB_GG_VerifyExecution(String method)
	{
		//boolean exitvar = false;
		
		WorkbookSettings ws = null;
		Workbook workbook = null;
		Sheet sheet = null;
		String strTestSuitFile;
		
				
		if(bDataMigration)
			strTestSuitFile = "./DataPool/DM_DataPool/TB_DSL_TestSuites.xls";
		else
		strTestSuitFile = "./DataPool/TB_DSL_TestSuites.xls";
		int rowCount = '0';
		int columnCount = '0';
		
		boolean y = false;
	    try{
	    		fs = new FileInputStream(new File(strTestSuitFile));	
	    		ws = new WorkbookSettings();
				ws.setLocale(new Locale("en", "EN"));
				// opening the work book and sheet for reading y's
				workbook = Workbook.getWorkbook(fs, ws);
				sheet = workbook.getSheet(0);
				 
				//System.out.println("Total Rows inside Sheet:" + sheet.getRows());
				rowCount = sheet.getRows();
	
				//System.out.println("Total Column inside Sheet:" + sheet.getColumns());
				columnCount = sheet.getColumns();
				String meth_name = method.trim();
				for( int i =1; i < rowCount; i++) 
				{
					//Get Individual Row starting from second
					//for (int j=1;j<columnCount;j++)
					{
						Cell cell=sheet.getCell(2,i);
						if (cell.getContents().equalsIgnoreCase(meth_name))
						{
							Cell cell1=sheet.getCell(2+1,i);
							if(cell1!= null)
							{
								if (cell1.getContents().equalsIgnoreCase("Y")) 
									{
										y= true;
										TB_GG_Log("Adding "+ method+" to execution list");	
									}
								else if(cell1.getContents().equalsIgnoreCase("N")) 
									{
										y= false;
									}
								else{
									    y= false;
									   //System.out.println("NO VALUE GIVEN FOR "+method);
									    //TB_GG_Log("NO VALUE GIVEN FOR "+method);
									}
							}
						}
						if (cell.getContents().equalsIgnoreCase("END"))
						{
							//exitvar=true;
							break;
						}
						
				   }
				}// outer for
	    fs.close();
	    }
	    catch(FileNotFoundException f)
	    {
	    	TB_GG_Log(f.getMessage().toString());
	    	TB_GG_Log("The given ./DataPool/TestSuites.xls does not exist");
	    	System.err.println("The given ./DataPool/TestSuites.xls does not exist");	
	    }
	    catch(BiffException be)
		{
	    	
	    	be.printStackTrace();
	    	TB_GG_Log(be.getMessage().toString());
	    	TB_GG_Log("The given file should have .xls extension.");
			System.out.println("The given file should have .xls extension.");
		}
		catch(Exception e)
		{
			TB_GG_Log(e.getMessage().toString());
			e.printStackTrace();
		}
   // fs.close();
	return y;
	}
	
	
	/**********************************************************************************************************
	'  Function Name:	TB_GG_log
	'  Purpose: 		 Log function is for reading TestSiute to decide the execution of a given test/function
	'  Inputs Parameters:  Text to be added to log
	'  Returns: 	
		@author Skaur
	'  Creation Date: 07/08/2012
/
 **********************************************************************************************************/	
	
	public void TB_GG_Log( String data)
	{	
			File file;
	    	FileWriter fileWritter;
	    	BufferedWriter bufferWritter;
	    	try{
	    			file =new File("Logfile.log");
	    			//if file doesn't exists, then create it
	    			if(!file.exists())
	    			{
	    			System.out.println("Log file Created");
	    			file.createNewFile();
	    			}
	    			//true = append file
	    			else
	    			{
	    			fileWritter = new FileWriter(file.getName(),true);
	    	        bufferWritter = new BufferedWriter(fileWritter);
	    	        bufferWritter.write(System.currentTimeMillis()+"[class name]  ");
	    	        bufferWritter.write("INFO:   "+ data);
	    	        bufferWritter.newLine();
	    	        bufferWritter.close();
	    	        System.out.println(data);
	    	        //System.out.println("Done");
	    			}
	    	}		
	    	catch(IOException e)
	    	{
	    		e.printStackTrace();
	    	}
	}
	
/*	public static void main(String  str[]) throws FileNotFoundException, IOException
	{
		String strLastNameDisplayed= "welcome";
		String strName =strLastNameDisplayed;
				// "\""+strLastNameDisplayed+ "\"";
		System.out.println(strName);
	}*/

	boolean clickAndWait(WebDriver webDriver, String oObjectXpath, String strObjectName, String strData)
	{
		String strStepDetails;
		boolean bResult = false;
		try
		{
			WebElement oClick = TB_GG_FindElement(webDriver, By.xpath(oObjectXpath), intTimeOut);
			//Click on Object
			oClick.click();
			strStepDetails = "Click on " + strObjectName + "and Wait for " + strData;
			System.out.println(strStepDetails);
			TB_GG_Log(strStepDetails);
			bResult = true;
			Long longData = new Long(strData);
			Thread.sleep(longData);
		}
		catch(Exception ex)
		{
			System.err.println("Got an exception! ");
			ex.printStackTrace();
		//	Log.info(ex.getStackTrace().toString());
		}
		return bResult;
	}

	/**********************************************************************************************************
	'  Function Name:	TB_GG_SelectDDListItem 
	'  Purpose: 		This function will select a value in combox object. 
	'  Inputs Parameters: (WebDriver webDriver, String oObjectXpath, String strObjectName, String strData)
			webDriver:	WebDriver to run the test
			oObjectXpath:	The xpath of specific object
			strObjectName:	Name of object in testcase file
			strData:		Data to fill in Object
	'  Returns: true or false
				true if PASS
				false if FAIL
	'   Author       : Thuan Nguyen
	'   Creation Date: 09/05/2012
	*/
	boolean TB_GG_SelectDDListItem(WebDriver webDriver, String oObjectXpath, String strObjectName, String strData)
	{
		String strStepDetails="";
		String strStatus="";
		boolean bResult = false;
		try
		{
			WebElement weDropDownList = TB_GG_FindElement(webDriver, By.xpath(oObjectXpath), intTimeOut);
			//Select data for Object
			
			List <WebElement> lstOptions = weDropDownList.findElements(By.tagName("option"));
			for (WebElement weOption : lstOptions)
			{
				if(weOption.getText().equalsIgnoreCase(strData.trim()))
				{
					
					weOption.click();
					bResult = true;
					strStepDetails = "Selected " + strObjectName + ": " + strData;
					strStatus="Pass";
					break;
				}
				else
				{
					strStepDetails = "Not selected " + strObjectName + ": " + strData;
					 strStatus="Fail";
				}
			}
			//	strStepDetails = "Select value of Web list " + strObjectName + ": " + strData;
			TB_GG_Report(strStepDetails, strStatus, true);
			//System.out.println(strStepDetails);
			TB_GG_Log(strStepDetails);
		}
		catch(Exception ex)
		{
			System.err.println("Got an exception! ");
			ex.printStackTrace();
			TB_GG_Log(ex.getMessage().toString());
		}
		return bResult;
	}

	/**********************************************************************************************************
	@author Skaur
	@doc  WaitSelectDDListItem is used for dependent dropdown list option selects
	@return boolean : true when given option gets selected in the drop down
	@param 
	@Date 16Aug,2012
	*/	
		
	boolean TB_GG_WaitSelectDDListItem(WebDriver webDriver, String oObjectXpath, String strObjectName, String strData)
	{
		String strStepDetails="";
		boolean bResult = false;
		try
		{
			WebElement weDropDownList = TB_GG_FindElement(webDriver, By.xpath(oObjectXpath),intTimeOut);
			//Select data for Object
			//List <WebElement> lstOptions = weDropDownList.findElements(By.tagName("option"));
			
			int iSleepTime = 5000;
			for(int i = 0; i < 50000; i += iSleepTime)
			{
				List <WebElement> lstOptions = weDropDownList.findElements(By.tagName("option"));
				if(lstOptions.size()>1)
				{
					for (WebElement weOption : lstOptions)
					{
						if(weOption.getText().equalsIgnoreCase(strData))
						{
							weOption.click();
							bResult = true;
							strStepDetails = "Selected " + strObjectName + ": " + strData;
							TB_GG_Report(strStepDetails, "Pass", true);
							return bResult;
						}
					}
				}
				else
				{
						Thread.sleep(iSleepTime);
						System.out.println("DROP DOWN LIST NOT UPDATED! ");
						System.out.println(String.format("Waited for %d milliseconds.[%s]", i + iSleepTime, weDropDownList));
						strStepDetails = "Not selected " + strObjectName + ": " + strData;
					
				}
			
				
			}
			
			TB_GG_Log(strStepDetails);
		}
		catch(Exception ex)
		{
			System.err.println("Got an exception! ");
			ex.printStackTrace();
			TB_GG_Log(ex.getMessage().toString());
		}
		return bResult;
	}
	
/*********************************************
 * 	
 * @return

*/	
	public void TB_GG_ReportSp(int col,int row, String... stepName)
	{
        Workbook workbook1;
        WritableWorkbook workbook;
        ///Test_ToolBoxV0.1
        
        File file = new File("./Results/StampDudtyCalculator.xls");
        WorkbookSettings wbSettings = new WorkbookSettings();
        wbSettings.setLocale(new Locale("en", "EN"));
        try
        {   
        	if(file.exists())
        	{
               workbook1 = Workbook.getWorkbook(file, wbSettings);
               workbook = Workbook.createWorkbook(file, workbook1);
               new_file= false;
        	}
        	else
        	{
                 
               workbook = Workbook.createWorkbook(file, wbSettings);
               workbook.createSheet("Report", 0);
               System.out.println("Creating file" + workbook.toString());//if(workbook.equals(null))
               new_file= true;
             }
             WritableSheet excelSheet = workbook.getSheet(0);
             //createLabel(excelSheet);
        // if the file has been created first time
             //this.row = ((Sheet)excelSheet).getRows();
            // Cell c = excelSheet.getCell("nkkjjj");
            // int row = c.getRow();
             if(new_file)
             {
            	addCaption(excelSheet, 0, 0, "Sprint No");
 		        addCaption(excelSheet, 1, 0, "Test Case");
 		        addCaption(excelSheet, 2, 0, "Purchase Property State");
 		        addCaption(excelSheet, 3, 0, "First Home Buyer");
 		        addCaption(excelSheet, 4, 0, "Owner Occupied");
 		        addCaption(excelSheet, 5, 0, "Purchase Price");
 		        addCaption(excelSheet, 6, 0, "Primary Loan Reason");
 		        addCaption(excelSheet, 7, 0, "Expected Stamp Duty");
 		        addCaption(excelSheet, 8, 0, "Actual Stamp Duty");
 		        addCaption(excelSheet, 9, 0, "Stamp Duty Result");
 		        addCaption(excelSheet, 10, 0, "Expected Transfer and Registration Fee");  
		        addCaption(excelSheet, 11, 0, "Actual Transfer and Registration Fee");
		        addCaption(excelSheet, 12, 0, "Transfer and Registration FeeResult");
 		        
	 	        for(int i=13; i<19; i++  )
	      	   {
	 	        	addCaption(excelSheet, i, 0, "" ); 
	      	   
	      	   }
             }
             else
             {
            	 int intNo = col;
            	 for(String s : stepName )
            	 {
            		 addLabel1(excelSheet, intNo, row, s);  
            		 intNo++;
            	 }
	                                    
             }                 
	            

	    workbook.write();
	    workbook.close();
        }
        catch(Exception e)
        {
        	e.printStackTrace();
        	TB_GG_Log(e.toString());
        }
  }
	 
	public void TB_GG_Report(String stepName,String result,  boolean b)
	{
        Workbook workbook1;
        WritableWorkbook workbook;
        String strFilePath ;
        if(bDataMigration)
        	strFilePath = "./Results/DM_Results.xls";
        else 
        	strFilePath = "./Results/Results.xls";
        File file = new File(strFilePath);
        WorkbookSettings wbSettings = new WorkbookSettings();
        wbSettings.setLocale(new Locale("en", "EN"));
        try
        {   
        	if(file.exists())
        	{
               workbook1 = Workbook.getWorkbook(file, wbSettings);
               workbook = Workbook.createWorkbook(file, workbook1);
               new_file= false;
        	}
        	else
        	{
                 
               workbook = Workbook.createWorkbook(file, wbSettings);
               workbook.createSheet("Report", 0);
               System.out.println("Creating file" + workbook.toString());//if(workbook.equals(null))
               new_file= true;
            }
        
        WritableSheet excelSheet = workbook.getSheet(0);
        createLabel(excelSheet);
        // if the file has been created first time
             this.row = ((Sheet)excelSheet).getRows();
             //addNumber(excelSheet, 0, row, row );
      
               if(b)
               {
                                                                                            
                   if(!(result.equals("")))
                   {
                	   addLabel(excelSheet, 1, row, stepName);
                	   addLabel(excelSheet, 2, row, result);
                   }
                   else
                   {   
                	   addLabel(excelSheet, 2, row, "Function");
                	   addLabel(excelSheet, 1, row, stepName);
                	}
                   
                    if(!(stepName.equals("")))
                       addLabel(excelSheet, 3, row, DateTime());
                    else
                       addLabel(excelSheet, 3, row, "");
                                   
               }
               else
               {
            	   
            	   //addSuite(excelSheet, 0, row, "" ); 
            	   addSuite(excelSheet, 0, row, Integer.parseInt(prop.getProperty("Sprint"))+"" );
            	   // Second column
            	   if(result.equals(""))
            	   {
            		   addSuite(excelSheet, 1, row, stepName);
            		   addSuite(excelSheet, 2, row, "");
            	   }
            	   else
            		/*  addSuite(excelSheet, 1, row, stepName+" = "+result);
            	   		addSuite(excelSheet, 2, row, "");*/
            	   {
            		   addSuite(excelSheet, 1, row,stepName);
            		   addSuite(excelSheet, 2, row, result);
            	   }
            	   
                      //further columns
            	   for(int i=3; i<15; i++  )
            	   {
            		   addSuite(excelSheet, i, row, "" ); 
            	   
            	   }
                    
                      
               }   

        workbook.write();
        workbook.close();
        }
        catch(Exception e)
        {
        	e.printStackTrace();
        	TB_GG_Log(e.toString());
        }
  }
	public void TB_GG_WriteOpportunityNumber(String strbpId ,String strAppnum)
	{
        Workbook workbook1;
        WritableWorkbook workbook;
        String strFilePath ;
       
        if(bDataMigration)
        	strFilePath = "./Results/DMApplicationNumber_List_List.xls";
        else 
        	strFilePath = "./Results/ApplicationNumber_List.xls";
        File file = new File(strFilePath);
        WorkbookSettings wbSettings = new WorkbookSettings();
        wbSettings.setLocale(new Locale("en", "EN"));
        try
        {   
        	if(file.exists())
        	{
               workbook1 = Workbook.getWorkbook(file, wbSettings);
               workbook = Workbook.createWorkbook(file, workbook1);
               new_file1= false;
        	}
        	else
        	{
                 
               workbook = Workbook.createWorkbook(file, wbSettings);
               workbook.createSheet("Report", 0);
               System.out.println("Creating file" + workbook.toString());//if(workbook.equals(null))
               new_file1= true;
            }
        
        WritableSheet excelSheet = workbook.getSheet(0);
       
        createLabel(excelSheet);
        
             this.row = ((Sheet)excelSheet).getRows();
             addSuite(excelSheet, 0, row, Integer.parseInt(prop.getProperty("Sprint"))+"" );
             addLabel(excelSheet, 1, row, strbpId);
             addLabel(excelSheet, 2, row, strAppnum);
             
                    

	        workbook.write();
	        workbook.close();
        }
        catch(Exception e)
        {
        	e.printStackTrace();
        	TB_GG_Log(e.toString());
        }
  }
/**********************************************************************************************************
 * @category : Helper 
 ***********************************************************************************************************/
  private void createLabel(WritableSheet sheet)
       {
        // Lets create a times font
        WritableFont times10pt = new WritableFont(WritableFont.ARIAL, 10,WritableFont.BOLD);
        // Create create a bold font with underlines
        WritableFont times10ptBoldUnderline =new WritableFont(WritableFont.TIMES,12,WritableFont.BOLD);
        
        try
        {
	        // Define the cell format
        	Colour c = Colour.WHITE;
        	Colour cy = Colour.ICE_BLUE;
        	Colour cpass = Colour.GREEN;
        	Colour cfail = Colour.RED;
        	Colour cfunction = Colour.GRAY_25;
        	
	        times = new WritableCellFormat(times10pt);
	        pass = new WritableCellFormat(times10pt);
	        fail = new WritableCellFormat(times10pt);
	        function = new WritableCellFormat(times10pt);
	        
	        // Lets automatically wrap the cells
	       /* times.setWrap(true);
	        pass.setWrap(true);
	        fail.setWrap(true);
	        function.setWrap(true);
	       */
	        times.setBackground(cy);
	        pass.setBackground(cpass);
	        fail.setBackground(cfail);
	        function.setBackground(cfunction);
	        
	        //new WritableFont(WritableFont.BOLD,12,false);
	                      //.TIMES, 10, WritableFont.BOLD, false,
	                      //UnderlineStyle.SINGLE, c);
	        
	        times10ptBoldUnderline.setColour(c);
	        timesBoldUnderline = new WritableCellFormat(times10ptBoldUnderline);
	        // Lets automatically wrap the cells
	        timesBoldUnderline.setWrap(true);
	  //      timesBoldUnderline.setAlignment(a)
	        timesBoldUnderline.setBackground(Colour.VIOLET);
	        
	
	      /*  CellView cv = new CellView();
	        cv.setFormat(times);
	        cv.setFormat(timesBoldUnderline);*/
	       
	  
	        
	       
	    //    CellFormat cf=new CellFormat(times);
			//cv.setFormat(cf);
	        //cv.setAutosize(true);
	
	        // Write a few headers
	        if(new_file)
	        {
	        	
		        addCaption(sheet, 0, 0, "Sprint No");
		        addCaption(sheet, 1, 0, "BP Details");
		        addCaption(sheet, 2, 0, "Step Status");
		        addCaption(sheet, 3, 0, "Execution Date-Time");
	        
	        for(int i=4; i<15; i++  )
     	   {
	        	addCaption(sheet, i, row, "" ); 
     	   
     	   }
	   
	        
	        }
	        if(new_file1)
	        {
	        	
		        addCaption(sheet, 0, 0, "Sprint No");
		        addCaption(sheet, 1, 0, "BP ID");
		        addCaption(sheet, 2, 0, "Application Number");
	        }
        }
        catch(WriteException e)
        {
        	e.printStackTrace();
        	TB_GG_Log("TB_GG_CreateLable fail"+e.toString());
        }

  }
  /**********************************************************************************************************
	 * @category : Helper 
	 ***********************************************************************************************************/

  private void addCaption(WritableSheet sheet, int column, int row, String s)
               throws RowsExceededException, WriteException {
        Label label;
        label = new Label(column, row, s, timesBoldUnderline);
        sheet.addCell(label);
  }
  /**********************************************************************************************************
	 * @category : Helper 
	 ***********************************************************************************************************/
 /* private void addNumber(WritableSheet sheet, int column, int row, Integer integer) throws WriteException, RowsExceededException {
        Number number;
        number = new Number(column, row, integer);
        sheet.addCell(number);
  }*/
  /**********************************************************************************************************
	 * @category : Helper 
	 ***********************************************************************************************************/
  boolean dfun=false;
  private void addLabel(WritableSheet sheet, int column, int row, String s)
               throws WriteException, RowsExceededException {
        Label label;
       
        if(s.equalsIgnoreCase("Pass"))
        {
        	label = new Label(column, row, s,pass);
        	sheet.addCell(label);
        }
        else if(s.equalsIgnoreCase("Fail"))
        {
        	label = new Label(column, row, s,fail);
        	sheet.addCell(label);
        }
        else if(s.equalsIgnoreCase("Function"))
        {
        	
        	label = new Label(column, row, "",function);
        	sheet.addCell(label);
        	dfun=true;
        }
        else if(dfun)
        {
        	
        	label = new Label(column, row, s,function);
        	sheet.addCell(label);
        	dfun=false;
        }
        else 
        {
        	 label = new Label(column, row, s);
        	 sheet.addCell(label);
        }
        	
        
  }
  /**********************************************************************************************************
	 * @category : Helper 
	 ***********************************************************************************************************/ 
  private void addLabel1(WritableSheet sheet, int column, int row, String s)
          throws WriteException, RowsExceededException 
   {
	  Label label;
	  label = new Label(column, row, s);
 	 sheet.addCell(label);
   }
  /**********************************************************************************************************
	 * @category : Helper 
	 ***********************************************************************************************************/
  private void addSuite(WritableSheet sheet, int column, int row, String s)
          throws WriteException, RowsExceededException {
   Label label;
   if(s.equalsIgnoreCase("Pass"))
   {
   	label = new Label(column, row, s,pass);
   	sheet.addCell(label);
   }
   else if(s.equalsIgnoreCase("Fail"))
   {
   	label = new Label(column, row, s,fail);
   	sheet.addCell(label);
   }
   else
   {
	   label = new Label(column, row, s,times);
	   sheet.addCell(label);
   }
  
}

  /**********************************************************************************************************
	 * @category : Helper 
	 ***********************************************************************************************************/
  public static String DateTime() 
  {
      Calendar cal = Calendar.getInstance();
      SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
      return sdf.format(cal.getTime());
  }
  
//////////////////////////////////////////////////////////////

  public boolean TB_GG_DoesWebElementExist(WebDriver webDriver, By by,int iTimeOut) 
	{
		boolean bPresent = false;
		try 
		{
			TB_GG_FindElement(webDriver, by,iTimeOut);
			bPresent = true;
		}
		catch(NullPointerException ex) 
		{	
			System.out.println("Element does not found");
			ex.printStackTrace();
		}
		catch (RuntimeException ex)
		{
			bPresent = false;
			TB_GG_Log(ex.getMessage().toString());
			//System.out.println("Got Exception");
		}
		
		return bPresent;
	}
  /**********************************************************************************************************
	 * Waits till the element disappears from the page
	 * @author skaur
	 * 17 Oct, 2012
	 * 
	 ***********************************************************************************************************/
  public void TB_GG_WaitAnElementDisappears(WebDriver webDriver, By by, int iTimeOut)
	{
		int iTotal = 0;
		int iSleepTime = 6000;
		while(iTotal <= iTimeOut)
		{
			try
			{
				Thread.sleep(iSleepTime);
			
				if(TB_GG_FindElement(webDriver, by,9000).isDisplayed())
					{
							iTotal = iTotal + iSleepTime;
							System.out.println("Element Found");
							System.out.println(String.format("Waiting to disappear %d milliseconds.[%s]", iTotal, by));          
						
					}
						
					else
					{
						TB_GG_Log("Wait over");
						return;
					}
			}
			catch(Exception ex)
			{
				TB_GG_Log("Element Not Found");
				return;
			}
		/*	catch(InterruptedException ex) 
			{
				throw new RuntimeException(ex);
				return;
			}*/
			
		}
	}
  
  /**********************************************************************************************************
 	 * @author skaur
 	 * @doc overload TB_GG_FindElement for find by web element (not driver)
 	 * 
 	 ***********************************************************************************************************/

  public WebElement TB_GG_FindElement(WebElement we, By by, int iTimeOut)
	{
		int iSleepTime = 3000;
		for(int i = 0; i < iTimeOut; i += iSleepTime)
		{
			List<WebElement> oWebElements = we.findElements(by);
			if(oWebElements.size()>0)
			{
				return oWebElements.get(0);
			}
			else
			{
				try
				{
					Thread.sleep(iSleepTime);
					System.out.println(String.format("Waited for %d milliseconds.[%s]", i + iSleepTime, by));          
				}
				catch(InterruptedException ex) 
				{	
					System.out.println("Element not found");
					TB_GG_Log(ex.getMessage().toString());					
				}
			}
		}
		return null;
	}
  
  
  

	/**********************************************************************************************************
	 '  Function Name: TB_LB_SwitchToIframe
	 '  Purpose:   This function will switch to Iframe
	 '  Inputs Parameters: (WebDriver webDriver, String strData)
	   webDriver: WebDriver to run the test
	   oObjectXpath: The xpath of specific object
	 '  Returns: true or false
	    true if switch successful
	    false if switch unsuccessful
	 '   Author       : Hung Nguyen Dang
	 '   Creation Date: 13/06/2012
	 /**********************************************************************************************************/
	
	
	boolean TB_GG_SwitchToIframe(WebDriver webDriver, String strFrameXpath)
	{
		String strStepDetails;
		boolean bResult = false;
		try
		{
			WebDriver Iframe = webDriver.switchTo().frame(strFrameXpath);
			System.out.println(Iframe.getTitle());
			strStepDetails = "SWITCH TO Iframe successfully !!!";
			//TB_GG_Report(strStepDetails,"Pass", true);
			//System.out.println(strStepDetails);
			TB_GG_Log(strStepDetails);
			bResult = true;
			//defaultWebDriver = false;
		}
		catch(Exception ex)
		{

			//System.err.println("Got an exception! ");
			ex.printStackTrace();
			TB_GG_Log(ex.getMessage().toString());
		}
		return bResult;
	}
	/**********************************************************************************************************
	@author Skaur
	@doc  threeDaysAfter is used to pass date in calendar as the three next days to sys date.
	@return date string as dd/mm/yyyy
	@param 
	@Date 16Aug,2012
	*/	 
  
 
  public String TB_GG_ThreeDaysAfter()
  {
	    String threeDaysAfter = "";
	    Date date = new Date();
	    Calendar cal = Calendar.getInstance();
	    cal.setTime(date);

	    cal.add(Calendar.DAY_OF_YEAR, +3);
	    Date before = cal.getTime();
	    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
	    threeDaysAfter = formatter.format(before);
	    
	    return threeDaysAfter;
	}
	public String TB_GG_GenerateRandomName() 
	{ 
		//String characters="ABCDEFGYHUI";
		int length=5;
		String characters="abcdefghklmnopqrstuvwxyz";
		Random generator = new Random(); 
		char[] text = new char[length]; 
	    for (int i = 0; i < length; i++) 
	    { 
	        text[i] = characters.charAt(generator.nextInt(characters.length())); 
	    } 
	    text[0]= Character.toUpperCase(text[0]);
	    return new String(text); 
	   
	} 
	 boolean TB_GG_ClickSpecificButton(WebDriver webDriver, String oObjectXpath, String strObjectName)
	    {
	    	String strStepDetails;
	    	boolean bResult = false;
	    	try
	    	{
	    	//	WebElement weelement = TB_GG_FindElement(webDriver, By.className("ui-dialog-buttonpane"), intTimeOut);
	    		List <WebElement> lstButtons = webDriver.findElements(By.tagName("button"));

	    		//Click on Object
	    		for (WebElement weButton : lstButtons)
	    		{
					if(weButton.isDisplayed() == true)
					{
						String txtButtonName = weButton.getAttribute("innerHTML");
						if(txtButtonName.trim().contentEquals(oObjectXpath.trim()))
						{
							weButton.click();
							Thread.sleep(3000);

							strStepDetails = "Click on specific button: " + strObjectName + " successfully!!!";
							System.out.println(strStepDetails);
							//Log.info(strStepDetails);
							bResult = true;

							break;
						}
					}
				}

	    	}
	    	catch(Exception ex)
	    	{
	    		System.err.println("Got an exception! ");
	    		ex.printStackTrace();
	    	//	Log.info(ex.getMessage().toString());
	    	}
	    	return bResult;
	    }	
 public void TB_GG_Wait()
 {
		 TB_GG_Wait(5000);
 }
 public void TB_GG_Wait(int i)
 {
		 try
		 {
			Thread.sleep(i);
		 }
		 catch (InterruptedException e) 
		 {
			
			e.printStackTrace();
		 }
 }
 public void TB_GG_WaitAnElementPresent(WebDriver webDriver, By by, int iTimeOut)
	{
		int iTotal = 0;
		int iSleepTime = 3000;
		while(iTotal < iTimeOut)
		{
				
			//List<WebElement> oWebElements = webDriver.findElements(by);
			//if(oWebElements.size()>0)
			if(TB_GG_DoesWebElementExist(webDriver, by, 3000))
				return;
			else
			{
				try
				{
					Thread.sleep(iSleepTime);
					iTotal = iTotal + iSleepTime;
					System.out.println(String.format("Waiting for %d milliseconds.[%s]", iTotal, by));          
				}
				catch(InterruptedException ex) 
				{
					System.out.println("Sorry could not find given element");
					//throw new RuntimeException(ex);
				}
			}
		}
	}
	public WebElement TB_GG_FindElement(WebDriver webDriver, By by, int iTimeOut)
	{
		int iSleepTime = 3000;
		for(int i = 0; i < iTimeOut; i += iSleepTime)
		{
			List<WebElement> oWebElements = webDriver.findElements(by);
			if(oWebElements.size()>0)
			{
				return oWebElements.get(0);
			}
			else
			{
				try
				{
					Thread.sleep(iSleepTime);
					System.out.println(String.format("Waited for %d milliseconds.[%s]", i + iSleepTime, by));          
				}
				catch(InterruptedException ex) 
				{	
					throw new RuntimeException(ex);					
				}
				catch(NullPointerException ex) 
				{	
					System.out.println("Element does not found");
					ex.printStackTrace();
				}
			}
		}
		// Can't find 'by' element. Therefore throw an exception.
		String sException = String.format("Can't find %s after %d milliseconds.", by, iTimeOut);
		throw new RuntimeException(sException); 
		
	}
	public boolean TB_GG_Input(WebDriver webDriver, By by, String strObjectName, String strData)
	{
		String strStepDetails;
		boolean bResult = false;
		try
		{			
			TB_GG_WaitAnElementPresent(webDriver, by, intTimeOut);
			WebElement oInput = TB_GG_FindElement(webDriver, by, intTimeOut);
			if(TB_GG_DoesWebElementExist(webDriver, by, intTimeOut))
			//Input value to object
			{	
				oInput.clear();
				oInput.sendKeys(strData);
				
				strStepDetails = "Enter value to " + strObjectName + ": " + strData;
				//System.out.println(strStepDetails);			
				TB_GG_Log(strStepDetails);
				bResult = true;
				TB_GG_Report(strStepDetails, "Pass", true);
			}
			else
			{
				
				TB_GG_Report("Element is not Present", "Fail", true);
				TB_GG_captureScreen(webDriver, "input");
			}
		}
		catch(Exception ex)
		{
			
			//System.err.println("Got an exception! ");
			TB_GG_Report("Fail to enter the value for "+strObjectName, "Fail", true);
			TB_GG_captureScreen(webDriver, "input");
			ex.printStackTrace();
			TB_GG_Log(ex.getMessage().toString());
		}
		return bResult;
	}
	
	public boolean TB_GG_Click(WebDriver webDriver, By by, String strObjectName)
	{
		String strStepDetails;
		boolean bResult = false,bExist= false;
		try
		{
			TB_GG_WaitAnElementPresent(webDriver, by, intTimeOut);
			bExist = TB_GG_DoesWebElementExist(webDriver, by, intTimeOut);
			
			if(!bExist)
				{
					TB_GG_captureScreen(webDriver, "Click");
					strStepDetails = strObjectName +" Not Found";
					TB_GG_Log(strStepDetails);
					TB_GG_Report(strStepDetails, "Fail", true);
					return bResult;
				}
			WebElement oClick = TB_GG_FindElement(webDriver, by, 5000);
			//Click on Object
			//TB_GG_Wait(2000); // tested and commented
			oClick.click();	
			
			

			strStepDetails = "Click on " + strObjectName;
			TB_GG_Log(strStepDetails);
			bResult = true;
			TB_GG_Report(strStepDetails, "Pass", true);
		}
		catch(Exception ex)
		{
			TB_GG_captureScreen(webDriver, "click");
			strStepDetails = "Fail to click on " + strObjectName;
			System.err.println("Got an exception! ");
			ex.printStackTrace();
			TB_GG_Log(ex.getMessage().toString());
			TB_GG_Report(strStepDetails, "Fail", true);
		}
		return bResult;
	}
	/**********************************************************************************************************
	@author Skaur
	@doc  click fast
	@param WebDriver, name of the file
	@Date 3Oct,2012
	*/	 	
	public boolean TB_GG_ClickFast(WebDriver webDriver, By by, String strObjectName)
	{
		String strStepDetails;
		boolean bResult = false,bExist= false;
		try
		{
			bExist = TB_GG_DoesWebElementExist(webDriver, by, intTimeOut);
			
			if(!bExist)
				{
					TB_GG_captureScreen(webDriver, "input");
					strStepDetails = strObjectName +" Not Found";
					TB_GG_Log(strStepDetails);
					TB_GG_Report(strStepDetails, "Fail", true);
					return bResult;
				}
			WebElement oClick = TB_GG_FindElement(webDriver, by, 5000);
			oClick.click();	
			strStepDetails = "Click on " + strObjectName;
			TB_GG_Log(strStepDetails);
			bResult = true;
			TB_GG_Report(strStepDetails, "Pass", true);
		}
		catch(Exception ex)
		{
			TB_GG_captureScreen(webDriver, "input");
			strStepDetails = "Fail to click on " + strObjectName;
			System.err.println("Got an exception! ");
			ex.printStackTrace();
			TB_GG_Log(ex.getMessage().toString());
			TB_GG_Report(strStepDetails, "Fail", true);
		}
		return bResult;
	}
	/**********************************************************************************************************
	@author Skaur
	@doc  take a screenshot
	@param WebDriver, name of the file
	@Date 3Oct,2012
	*/	 	
	public void TB_GG_captureScreen(WebDriver driver,String name) {

	    String msg,path;
	    String res;
	    try
	    {
	    	
	        File source = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
	        if(bDataMigration)
	        	 path = "./ScreenShots/DM_ScreenShots/" +name+"_"+ source.getName();	
	        else 
	        	path = "./ScreenShots/" +name+"_"+ source.getName();
	        FileUtils.copyFile(source, new File(path));
	        msg = "Screenshot captured at"+ path;
	    	res="Pass";
	    }
	    catch(IOException e) {
	        msg = "Failed to capture screenshot: " + e.getMessage();
	        res="Fail";
	    }
	    TB_GG_Report(msg, res, true);
	    TB_GG_Log(msg);
	}

	boolean hoverOnMenu(WebDriver webDriver, String oObjectXpath, String strObjectName)
	{
		String strStepDetails;
		boolean bResult = false;
		try
		{
			 
			Actions builder = new Actions(webDriver);    
			WebElement weMenu = webDriver.findElement(By.xpath(".//*[@id='menuItem417']/a"));//TB_GG_FindElement"));//(webDriver, By.id("menuItem417"),intTimeOut);
			//builder.clickAndHold(weMenu).build().perform();
		//	driver.findElement(By.linkText("Awaiting Deployment")).click(); 
			
			//builder.moveToElement(toElement, xOffset, yOffset)
			builder.moveToElement(weMenu).build().perform();
			TB_GG_Wait();
			//webDriver.findElement(By.linkText("Awaiting Deployment")).click(); 
		//	new WebDriverWait(webDriver, 50, 50).until(ExpectedConditions.elementToBeClickable(By.linkText("Awaiting Deployment")));
			webDriver.findElement(By.xpath(".//*[@id='menuItem417']/ul/li[2]/a")).click();
			
			//builder.release().perform();
			strStepDetails = "Mouseover on " + strObjectName;
			System.out.println(strStepDetails);
		
			bResult = true;
		}
		catch(Exception ex)
		{
			System.err.println("Got an exception! ");
			ex.printStackTrace();
			
		}
		return bResult;
	}

	/* cleans and converts amount displayed to double
	 * 
	 */
	public double TB_GG_StringToDouble(String le)
	{
		try
		{
			boolean neg = false;
			if (le==null || le.equals("")|| le.equals("NA") )
			{
				return 0.0;
			}
			else 
			{
				//le.replaceAll("[^\\d-]+", "");
				if(le.contains("-"))
				{
					neg = true;
					le = le.replace("-", "");
				}
				le =le.replaceAll("\\s","");
				le = le.replaceAll(",","");
				le = le.replace("$"," ");
				le = le.trim();
				if(neg) le= "-"+le;
		
				//Double d = (double)Math.round(Double.parseDouble(le)* 100) / 100;
				return Double.parseDouble(le);
				
			}
			
		}
		catch(NumberFormatException e)
		{
			e.printStackTrace();
			return 0.0;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return 0.0;
		}
	}	
	
public static void main(String args[]) throws FileNotFoundException, IOException
{
	GlobalGenericFunctions fg = new GlobalGenericFunctions();
	double d =  fg.TB_GG_StringToDouble("$- 7,8900.00");
	System.out.println(d);
	
	
}
}
